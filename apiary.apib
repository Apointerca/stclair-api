FORMAT: 1A
HOST: http://apointer.ca

# API documentation for StClair

# Group General
Please refer to [Decision Graph](http://clojure-liberator.github.io/liberator/assets/img/decision-graph.svg) for details.

## General HTTP status code
As HTTP status code contains a lot of information, here we demonstrate some of them, so we can use them directly in our response.

### 200
This is the most common status code. It basically means things are going well.
But usually it returns together with response body.
Mostly for `GET` request.

### 201
This status code indicates the requested resource has been created.
Response body should be returned together.
Mostly for `POST` request.

### 204
Similar to `200`, but nothing would come together with this status.
Mostly for `DELETE` and `PUT` requests.

## General HTTP status error code

To avoid redundent error code declaration, here we list all the default meaning of corresponding error code.
Please explicitly describe in each response if the meaning is different from what we state here.

### 400
Malformed request, this request is reported.
### 401
This request is not authorized.
### 403
This request doesn't have permission to access the resource.
### 404
The target resource is not found.
### 405
HTTP request method is not allowed.
### 406
The request parameters and headers not acceptable.
Please change it according to documentation.
### 409
Usually happens when creating a resource that already exists.

# Data Structure

## Pagination (object)
+ pageNumber: `1` (number, required) - The current page number, start from `1`
+ pageSize: `10` (number, required) - The number of record in each page. The minimum size is `5`
+ totalPage: `3` (number, required) - The total number of pages, minimum is `1`

# Data Structure

### MailDTO (object)
+ firstName: `Jasper` (string, optional)
+ lastName: `Zhao` (string, optional)
+ activationLink: `https://apointer.ca/activate/MToxNTI0OTQ4NDE0` (string, optional)

### Send Email Request (object)
+ recipients: `biubiu@apointer.ca`, `blahblah@apointer.ca` (array, required)
+ emailTemplateVariables (MailDTO, required) - A list of variables that will be injected into different email templates.

# Group Email Service

## Send Email Using A Template [/email/{id}]
Currently, we have 7 different templates, which are:

+ new registration
    - id = 1
    - Injectable variables:
        * firstName (string, required)
        * lastName (string, required)
        * activationLink (string, required) - New account activation link
+ reset password
    - id = 2
+ business account ready
    - id = 3
+ new store ready
    - id = 4
+ appointment confirmation
    - id = 5
+ Activation link expired send new activation link
    - id = 6
+ Reset password
    - id = 7

+ Parameters

    + id (int) - A unique template id which is mapped to different email template

### Send Email [POST]
Send email using a template to one or more recipients.

+ Request (application/json)

   + Attributes (Send Email Request)

+ Response 200 (application/json)

   + Body

            {
               "Email Sent!"
            }

+ Response 500 (application/json)
This indicates an email cannot be delivered to at least one of the given recipients.

    + Body

            {
               "Error in sending email!"
            }

# Data Structure

### Send Sms Request (object)
+ phone: `1234567890` (string, required) - The phone number want to send to
+ data (array[string], required) - The data to fill in the placeholder according to template requirement

# Group Sms Service

## Send Email with Template [/email/{id}]
Currently, we have 1 template, which are:

id | name | data
---|---|---
1|Appointment Notification| CustomerName, ServiceName, Time, StoreAddress

+ Parameters

    + id: 1 (number, required) - The template id

### Send Sms [POST]
Send Sms to one recipient.

+ Request (application/json)

   + Attributes (Send Sms Request )

+ Response 201 (application/json)
   + Body

+ Response 404
Indicates the template id not found

    + Body

